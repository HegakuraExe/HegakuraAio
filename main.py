#created by @hegakura
#created by @hegakura
#created by @hegakura

#–û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import aiogram
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ContentType, Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from asyncio import sleep
from time import strftime
import sqlite3
import asyncio
import logging
import datetime
import timedelta
import time

#–ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞
import config as cfg

#–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
bot_token = cfg.TOKEN
bot_adm_id = cfg.ADMINID
bot_chat_id = cfg.CHATID

#–ë–æ—Ç
bot = aiogram.Bot(bot_token, parse_mode='html')
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

#–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è/–≤–æ–ø—Ä–æ—Å–æ–≤
class Question(StatesGroup):
	msg = State()

#–î–ª—è –æ—Ç–≤–µ—Ç–∞
class AnswerToQuestion(StatesGroup):
	msg = State()

#–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class Rass(StatesGroup):
	msg = State()

#–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
connect = sqlite3.connect("users.db")
cursor = connect.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS users(
	user_id INTEGER,
	user_name STRING,
	user_username STRING,
	user_question STRING,
	user_lastQ STRING,
	question_id INTEGER
)
""")
connect.commit()

#–î–µ–≤–±–æ—Ä–¥
@dp.message_handler(commands=['–¥–µ–≤', 'dev'], commands_prefix='!./')
async def adm_ui(message):
	user_id = message.from_user.id
	if user_id == bot_adm_id:
		admin_menu = InlineKeyboardMarkup()
		statistics_bt = InlineKeyboardButton(
		text = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
		callback_data = 'stat'
		)
		mail_bt = InlineKeyboardButton(
		text = '‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞',
		callback_data = 'rassilka'
		)
		ping_bt = InlineKeyboardButton(
		text = 'üñ• –ü–∏–Ω–≥ –±–æ—Ç–∞',
		callback_data = 'ping'
		)
		waiting_bt = InlineKeyboardButton(
		text = 'üï∞ –ñ–¥—É—Ç –æ—Ç–≤–µ—Ç–∞',
		callback_data = 'waiting'
		)
		cancel_del_bt = InlineKeyboardButton(
		text = '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå',
		callback_data = 'cancel_del'
		)
		admin_menu.add(statistics_bt, ping_bt)
		admin_menu.add(mail_bt)
		admin_menu.add(waiting_bt)
		admin_menu.add(cancel_del_bt)
		await message.answer(
		f'üõ† –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:',
		reply_markup=admin_menu
		)
	else:
		await message.reply(
		f'–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!'
		)

#–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(text='cancel_del')
async def handle_cdel_button(c: types.CallbackQuery):
	user_id = c.from_user.id
	if user_id == bot_adm_id:
		await c.message.delete()
	else:
		await c.answer(
		text='–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!',
		show_alert=True
		)

#–ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç
@dp.callback_query_handler(text='stat')
async def handle_stat_button(c: types.CallbackQuery):
	user_id = c.from_user.id
	if user_id == bot_adm_id:
		cancel_menu = InlineKeyboardMarkup()
		cancel_bt = InlineKeyboardButton(
		text = 'üö´ –û—Ç–º–µ–Ω–∞',
		callback_data = 'cancel'
		)
		cancel_menu.add(cancel_bt)
		us = cursor.execute('SELECT * FROM users').fetchall()
		yes = cursor.execute('SELECT * FROM users WHERE user_question == "–î–∞"').fetchall()
		await c.message.edit_text(
		f"""#STATISTICS
<b>USERS: {len(us)}</b> üë§
<b>WAITING: {len(yes)}</b> üï∞""", reply_markup = cancel_menu
)
	else:
		await c.answer(
		text='–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!', show_alert=True
		)

#–ö–Ω–æ–ø–∫–∞ –ø–∏–Ω–≥
@dp.callback_query_handler(text='ping')
async def handle_ping_button(c: types.CallbackQuery):
	user_id = c.from_user.id
	if user_id == bot_adm_id:
		cancel_menu = InlineKeyboardMarkup()
		cancel_bt = InlineKeyboardButton(
		text = 'üö´ –û—Ç–º–µ–Ω–∞', callback_data = 'cancel'
		)
		cancel_menu.add(cancel_bt)
		a = time.time()
		bot_msg = await c.message.edit_text(
		text='–ü—Ä–æ–≤–µ—Ä–∫–∞...'
		)
		if bot_msg:
			b = time.time()
		await c.message.edit_text(
		f'ü§ñ PING: <code>{round((b-a)*1000, 2)}</code> –º/—Å.', reply_markup = cancel_menu
		)
	else:
		await c.answer(
		text='–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!', show_alert=True
		)

#–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.callback_query_handler(text='cancel')
async def cancel_wnum_button_handler(c: types.callback_query):
	user_id = c.from_user.id
	if user_id == bot_adm_id:
		admin_menu = InlineKeyboardMarkup()
		statistics_bt = InlineKeyboardButton(
		text = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data = 'stat'
		)
		mail_bt = InlineKeyboardButton(
		text = '‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', callback_data = 'rassilka'
		)
		ping_bt = InlineKeyboardButton(
		text = 'üñ• –ü–∏–Ω–≥ –±–æ—Ç–∞', callback_data = 'ping'
		)
		waiting_bt = InlineKeyboardButton(
		text = 'üï∞ –ñ–¥—É—Ç –æ—Ç–≤–µ—Ç–∞', callback_data = 'waiting'
		)
		cancel_del_bt = InlineKeyboardButton(
		text = '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', callback_data = 'cancel_del'
		)
		admin_menu.add(statistics_bt, ping_bt)
		admin_menu.add(mail_bt)
		admin_menu.add(waiting_bt)
		admin_menu.add(cancel_del_bt)
		await c.message.edit_text(
		f'üõ† –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:',
		reply_markup=admin_menu
		)
	else:
		await c.answer(
		text='–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!',
		show_alert=True
		)

#–ö–Ω–æ–ø–∫–∞ –≤–∞–π—Ç–∏–Ω–≥
@dp.callback_query_handler(text='waiting')
async def witing_button_handler(c: types.callback_query):
	user_id = c.from_user.id
	if user_id == bot_adm_id:
		cancel_menu = InlineKeyboardMarkup()
		cancel_bt = InlineKeyboardButton(
		text = 'üö´ –û—Ç–º–µ–Ω–∞',
		callback_data = 'cancel'
		)
		cancel_menu.add(cancel_bt)
		waiters = ""
		cursor.execute(f"SELECT user_name FROM users WHERE user_question == '–î–∞'")
		waiters_query = cursor.fetchall()
		user_nms = [user[0] for user in waiters_query]
		for usernm in user_nms:
			waiters += f"üë§ –ù–∏–∫: <code>{usernm}</code>" + str('\n')
		if str(waiters) == "":
		    await c.message.edit_text(
		    f'‚úÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–∂–∏–¥–∞–Ω–∏–π –Ω–µ—Ç!',
		    reply_markup = cancel_menu
		    )
		else:
		    await c.message.edit_text(
		    f'üï∞ <b>–û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞:</b>\n' + str(waiters),
		    reply_markup = cancel_menu
		    )
	else:
		await c.answer(
		text='–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!',
		show_alert=True
		)


#–†–∞—Å—Å—ã–ª–∫–∞
@dp.callback_query_handler(text="rassilka")
async def send_rass(call: types.CallbackQuery):
	user_id = call.from_user.id
	if user_id == bot_adm_id:
		await call.message.edit_text(
		text='üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:'
		)
		await Rass.msg.set()
	else:
		await call.answer(
		text='–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!',
		show_alert=True
		)

@dp.message_handler(content_types=ContentType.ANY, state=Rass.msg)
async def rassilka_msgl(message: types.Message, state: FSMContext):
	await state.finish()
	cursor.execute(f"SELECT user_id FROM users")
	users_query = cursor.fetchall()
	user_ids = [user[0] for user in users_query]
	nowtim = time.time()
	confirm = []
	decline = []
	bot_msg = await message.answer(
	f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...'
	)
	for i in user_ids:
		try:
			await message.copy_to(i)
			confirm.append(i)
		except:
			decline.append(i)
		await asyncio.sleep(0.3)
	nowtime = time.time()
	uptime = round(nowtime - nowtim)
	uptimestr = str(time.strftime("%H:%M:%S", time.gmtime(int(uptime))))
	await bot_msg.edit_text(
	f'üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n'
	f'‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(confirm)}\n'
	f'‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(decline)}\n'
	f'‚åö –í—Ä–µ–º—è: {str(uptimestr)}'
	)

#–ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–∞—Ç—å'], commands_prefix='/!.#')
async def start_cmd(msg: types.Message):
	user_id = msg.from_user.id #–ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user_name = msg.from_user.full_name #–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user_username = msg.from_user.username #–ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user_question = '–ù–µ—Ç' #–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–¥–∞–Ω
	user_lastQ = '–ù–µ—Ç' #–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (–≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞)

	#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	cursor.execute(f"SELECT user_id FROM users WHERE user_id = '{user_id}'")
	#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	if cursor.fetchone() is None:

		#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		cursor.execute(
			f"INSERT INTO users VALUES(?, ?, ?, ?, ?, ?);", (
			user_id,
			user_name,
			user_username,
			user_question,
			user_lastQ,
			0)
			)
		connect.commit()

		#–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
		await msg.answer(
			f'üëã –ü—Ä–∏–≤–µ—Ç <a href="tg://user?id={user_id}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>, –∑–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –±–æ—Ç–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü—É, –∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é –¥–ª—è –µ–≥–æ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞.'
			)

		#–ü—Ä–æ–≤–µ—Ä–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞
		if user_username is None:
			uname = 'Not entered'
		else:
			uname = user_username

		#–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥. —á–∞—Ç
		await bot.send_message(
			bot_chat_id,
			f'‚úÖ #NewMemberInBot\n'
			f'üë§ <b>Name:</b> {user_name}\n'
			f'üìé <b>Username:</b> {user_username}\n'
			f'üÜî <b>ID:</b> <code>{user_id}</code>'
			)
	else:

		#–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
		await msg.answer(
			f'–¢—ã —É–∂–µ –≤–≤–æ–¥–∏–ª(-–∞) –∫–æ–º–∞–Ω–¥—É /start\n'
			f'–ë–æ–ª—å—à–µ —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å - <b>–Ω–µ –Ω—É–∂–Ω–æ!</b>'
			)

#–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
@dp.message_handler(content_types=[ContentType.NEW_CHAT_MEMBERS])
async def bot_in_chat(msg: Message):

	#–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ
	new_chat = msg.new_chat_members[0]
	if str(new_chat.mention) == '@hegakuraBot':

		#–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞
		await msg.answer(
			f'‚ùé –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –ª/—Å!'
			)
		await bot.leave_chat(
		msg.chat.id
		)
	else:
		pass

#–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ
@dp.message_handler(commands=['–æ–±—Ä–∞—â–µ–Ω–∏–µ', 'question', '–≤–æ–ø—Ä–æ—Å'], commands_prefix='!./#')
async def cmd_question(message: types.Message):
	user_id = message.from_user.id

	#–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞
	if message.chat.type == 'private':
		user_question_stat = cursor.execute(f"SELECT user_question FROM users WHERE user_id = '{user_id}'").fetchone()
		user_status = (user_question_stat[0])

		#–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
		if str(user_status) == '–ù–µ—Ç':
			await message.answer(
				f'üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è:'
				)
			await Question.msg.set()
		else:
			await message.answer(
				f'–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—è—Ç!'
				)
	else:
		await message.reply(
			f'–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª/—Å!'
			)

		#–í—ã—Ö–æ–¥–∏ –∏–∑ —á–∞—Ç–∞
		await bot.leave_chat(
		msg.chat.id
		)

#–ü—Ä–∏—ë–º –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ª–æ–≥. —á–∞—Ç
@dp.message_handler(content_types=ContentType.ANY, state=Question.msg)
async def question_finish(message: types.Message, state: FSMContext):
	await state.finish()
	user_id = message.from_user.id #–ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user_name = message.from_user.full_name #–ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user_username = message.from_user.username #–ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

	#–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
	bot_msg = await message.answer(
		f'üï∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...'
		)

	await bot.send_message(bot_chat_id,
	f'‚úÖ #NewQuestion\n'
	f'üë§ <b>Name:</b> {user_name}\n'
	f'üìé <b>Username:</b> {user_username}\n'
	f'üÜî <b>ID:</b> <code>{user_id}</code>\n'
	f'<b>Question</b> üîΩ'
	)

	#–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
	await message.copy_to(
	bot_chat_id
	)

	#–ö–æ–Ω–µ—Ü
	await bot_msg.edit_text(
		f'‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n'
		f'üï∞ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–∫–∞ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—è—Ç'
		)
	#–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	cursor.execute('UPDATE users SET user_question = ? WHERE user_id = ?',("–î–∞", message.from_user.id))
	cursor.execute('UPDATE users SET user_lastQ = ? WHERE user_id = ?', (strftime("%d.%m.%Y, %H:%M:%S"), message.from_user.id))
	connect.commit()

#–°—Ç–∞—Ç—É—Å
@dp.message_handler(commands=['—Å—Ç–∞—Ç—É—Å', 'status'], commands_prefix='!./#')
async def status_cmd(msg: types.Message):
	user_id = msg.from_user.id

	#–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω
	if user_id != bot_adm_id:
		quest_stat = cursor.execute(f"SELECT user_question FROM users WHERE user_id = '{user_id}'").fetchone()
		que_st = (quest_stat[0])
		quest_time = cursor.execute(f"SELECT user_lastQ FROM users WHERE user_id = '{user_id}'").fetchone()
		que_time = (quest_time[0])
		if str(que_st) == '–ù–µ—Ç':
			que_stts = '‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ'
		elif str(que_st) == '–î–∞':
			que_stts = '‚ùé –ù–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –µ—â—ë –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏'
		if str(que_time) == '–ù–µ—Ç':
			que_ttime = 'üï∞ –í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π'
		else:
			que_ttime = "üï∞" + que_time
		await msg.answer(
			f'{que_stts}'
			f'{que_ttime}'
			)
	else:
		await msg.answer(
			f'–¢—ã –∞–¥–º–∏–Ω!'
			)

#–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å ID
@dp.message_handler(commands=['–ø—Ä–∏–≤—è–∑–∞—Ç—å', 'bind'], commands_prefix='!./#')
async def bind_cmd(msg: types.Message):
	user_id = msg.from_user.id

	#–ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
	if user_id == bot_adm_id:
		quest_id = cursor.execute(f"SELECT question_id FROM users WHERE user_id = '{user_id}'").fetchone()
		que_id = (quest_id[0])

		#–ï—Å–ª–∏ –ò–î –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
		if int(que_id) == 0:

			#–ü—Ä–∏–≤—è–∑–∫–∞
			answer_id = int(msg.text.split()[1])
			cursor.execute('UPDATE users SET question_id = ? WHERE user_id = ?', (answer_id, msg.from_user.id))
			connect.commit()
			await msg.answer(
				f'‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—ã –ø—Ä–∏–≤—è–∑–∞–ª–∏ ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞'
				)
		else:
			await msg.answer(
				f'‚ùé –ù–µ —É—Å–ø–µ—à–Ω–æ! –í—ã –µ—â—ë –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ: <code>{que_id}</code>'
				)
	else:
		pass

#–û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
@dp.message_handler(commands=['–æ—Ç–≤–µ—Ç–∏—Ç—å', '–æ—Ç–≤–µ—Ç', 'answer'], commands_prefix='!./#')
async def answer_question(message: types.Message):
	user_id = message.from_user.id

	#–ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
	if user_id == bot_adm_id:
		quest_id = cursor.execute(f"SELECT question_id FROM users WHERE user_id = '{user_id}'").fetchone()
		que_id = (quest_id[0])

		#–ï—Å–ª–∏ –ò–î –ø—Ä–∏–≤—è–∑–∞–Ω
		if int(que_id) != 0:
			await message.answer(
				f'üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:'
				)
			await AnswerToQuestion.msg.set()

		else:
			await message.answer(
				f'‚ùé –í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞!'
				)

	else:
		pass

#–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(content_types=ContentType.ANY, state=AnswerToQuestion.msg)
async def answer_finish(message: types.Message, state: FSMContext):
	await state.finish()
	user_id = message.from_user.id

	#–ü–æ–ª—É—á–µ–Ω–∏–µ –ò–î
	quest_id = cursor.execute(f"SELECT question_id FROM users WHERE user_id = '{user_id}'").fetchone()
	que_id = (quest_id[0])

	#–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
	bot_msg = await message.answer(
		f'–í–∞—à –æ—Ç–≤–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...'
		)

	#–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
	await bot.send_message(que_id,
		f'‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –≤–∞–º –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:'
		)

	await message.copy_to(
	que_id
	)

	#–ö–æ–Ω–µ—Ü
	await bot_msg.edit_text(
		f'‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'
		)

	#–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	cursor.execute('UPDATE users SET user_question = ? WHERE user_id = ?', ("–ù–µ—Ç", que_id))
	cursor.execute('UPDATE users SET question_id = ? WHERE user_id = ?', (0, user_id))
	connect.commit()

@dp.message_handler()
async def echo_help(message: types.Message):
	if message.chat.type == 'private':
		await message.answer(
		f'<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>:\n'
		f'/question - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å (–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ) –≤–ª–∞–¥–µ–ª—å—Ü—É\n'
		f'/status - —Å—Ç–∞—Ç—É—Å—ã –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π'
		)
	else:
		pass

#–ó–∞–ø—É—Å–∫
if __name__ == "__main__":
	executor.start_polling(dp, skip_updates=True)
